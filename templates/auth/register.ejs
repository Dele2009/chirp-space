<!-- Styles -->
<style>
  .btn-primary {
    background-color: #2563eb;
    color: white;
    padding: 0.625rem;
    border-radius: 0.5rem;
  }

  .btn-secondary {
    background-color: #9ca3af;
    color: white;
    padding: 0.625rem;
    border-radius: 0.5rem;
  }

  .step-indicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    color: gray;
    font-weight: 500;
    font-size: 15px;
    position: relative;
  }

  .step-indicator.active {
    color: #2563eb;
  }

  .step-line {
    flex: 1;
    height: 2px;
    background-color: gray;
    transition: background-color 0.5s;
  }

  .step-line.active {
    background-color: #2563eb;
  }

  .loader {
    z-index: 10;
  }
</style>
<!-- <img src="https://picsum.photos/600/400" alt="djdnvndn"> -->
<div class="container mx-auto pt-16">
  <div class="max-w-xl mx-auto bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md relative">
    <!-- Loader -->
    <div class="loader hidden absolute inset-0 bg-white/80 dark:bg-gray-800/80 flex items-center justify-center">
      <!-- <div class="animate-spin rounded-full h-12 w-12 border-t-4 border-blue-500"></div> -->
      <div role="status" class="absolute -translate-x-1/2 -translate-y-1/2 top-2/4 left-1/2">
        <svg aria-hidden="true" class="size-14  text-gray-200 animate-spin dark:text-gray-600 fill-blue-600"
          viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
            fill="currentColor" />
          <path
            d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
            fill="currentFill" />
        </svg>
        <span class="sr-only">Loading...</span>
      </div>
    </div>

    <div class="text-center mb-6">
      <img src="/img/app_logo.png" class="w-16 h-16 mx-auto mb-4" alt="App Logo" />
      <h2 class="text-3xl font-bold">Sign Up</h2>
      <p class="text-gray-500 dark:text-gray-400 mt-2">Join our community and connect with millions of people.</p>
    </div>

    <!-- Stepper -->
    <div class="flex items-center justify-between mb-8">
      <div class="step-indicator active">
        <i class="bx bx-user-circle text-xl"></i>
        <span class="font-medium text-xs">Personal Info</span>
      </div>
      <div class="step-line"></div>
      <div class="step-indicator">
        <i class="bx bx-lock-alt text-xl"></i>
        <span class="font-medium text-xs">Account Details</span>
      </div>
      <div class="step-line"></div>
      <div class="step-indicator">
        <i class="bx bx-check-circle text-xl"></i>
        <span class="font-medium text-xs">Password</span>
      </div>
    </div>
    <form id="register-form" method="POST" action="/users/register">
      <div id="stepper-content">
        <!-- Step 1: Personal Info -->
        <div class="step-content active transition-all duration-700 opacity-100">
          <h3 class="text-lg font-medium mb-4">Personal Information</h3>
          <div class="grid gap-4 sm:grid-cols-2 mb-4">
            <div>
              <label class="block text-sm font-medium text-gray-900 dark:text-white">First Name *</label>
              <input type="text" name="firstName" placeholder="John" class="form-input">
              <p class="text-xs">

              </p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-900 dark:text-white">Last Name *</label>
              <input type="text" name="lastName" placeholder="Doe" class="form-input">
              <p class="text-xs">

              </p>
            </div>
          </div>
        </div>

        <!-- Step 2: Account Details -->
        <div class="step-content hidden transition-all duration-700 opacity-0">
          <h3 class="text-lg font-medium mb-4">Account Details</h3>
          <div class="grid gap-4 sm:grid-cols-2 mb-4">
            <div>
              <label class="block text-sm font-medium text-gray-900 dark:text-white">Username</label>
              <input type="text" name="username" placeholder="username123$$&" class="form-input">
              <p class="text-xs">

              </p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-900 dark:text-white">Email *</label>
              <input type="email" name="email" placeholder="name@company.com" class="form-input">
              <p class="text-xs">

              </p>
            </div>
          </div>
        </div>

        <!-- Step 3: Password Setup -->
        <div class="step-content hidden transition-all duration-700 opacity-0">
          <h3 class="text-lg font-medium mb-4">Password Setup</h3>
          <div>
            <div>
              <label class="block text-sm font-medium text-gray-900 dark:text-white">Password *</label>
              <input type="password" name="password" placeholder="••••••••" class="form-input">
              <p class="text-xs">

              </p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-900 dark:text-white">Confirm Password *</label>
              <input type="password" name="confirmPassword" placeholder="••••••••" class="form-input" />
              <p class="text-xs">

              </p>
            </div>
          </div>
        </div>

        <div class="flex justify-between mt-4">
          <button id="prevBtn" type="button" class="btn-secondary hidden">Back</button>
          <button id="nextBtn" type="button" class="btn-primary">Next</button>
        </div>
      </div>
    </form>
  </div>
</div>



<!-- JavaScript for Stepper with Active Lines and Smooth Transitions -->
<script type="module">
  import validateInput from '/js/validateInput.js'

  const steps = Array.from(document.querySelectorAll('.step-content'));
  const indicators = Array.from(document.querySelectorAll('.step-indicator'));
  const lines = Array.from(document.querySelectorAll('.step-line'));
  const nextBtn = document.getElementById('nextBtn');
  const prevBtn = document.getElementById('prevBtn');
  const loader = document.querySelector('.loader');
  const form = document.getElementById('register-form');


  let currentStep = 0;
  
  let invalidIndexes = []
  let validIndexes = []
  function showLoader(callback) {
    loader.classList.remove('hidden');
    setTimeout(() => {
      loader.classList.add('hidden');
      callback();
    }, 1000); // Simulate loading for 1 second
  }

  function updateStepper() {
    // Update content visibility
    steps.forEach((step, index) => {
      step.style.opacity = index === currentStep ? '1' : '0';
      step.classList.toggle('hidden', index !== currentStep);
    });

    // Update indicators and lines
    indicators.forEach((indicator, index) => {
      indicator.classList.toggle('active', index <= currentStep);
    });

    lines.forEach((line, index) => {
      line.classList.toggle('active', index < currentStep);
    });

    // Manage button visibility
    prevBtn.classList.toggle('hidden', currentStep === 0);
    nextBtn.textContent = currentStep === steps.length - 1 ? 'Submit' : 'Next';
  }

  function isFormValid() {
    const currentformcontent = document.querySelectorAll('.step-content')
    console.log(currentformcontent)
    if (currentformcontent.length > 0) {
      const currentSec = currentformcontent[currentStep]
      // if (!formContent.classList.contains('hidden')) {
      const inputs = currentSec.querySelectorAll('input')
      console.log(inputs)
      if (currentStep === 2) {
        const password = inputs[0]
        const confirmPassword = inputs[1]
        if (!validateInput(password, confirmPassword)) {
          invalidIndexes.push(0, 1)
        }else{
          invalidIndexes = []
          validIndexes.push(0,1)
        }
      } else {
        inputs.forEach((input, index) => {
          if (!validateInput(input)) {
            invalidIndexes.push(index)
          }else{
            invalidIndexes = invalidIndexes.filter((data)=> data !== index)
            validIndexes.push(index)
          }
        })
      }
      
      if (validIndexes.length > 0) {
        validIndexes.forEach(position => {
          inputs[position].classList.remove('invalid')
        })
      }
      if (invalidIndexes.length > 0) {
       
        invalidIndexes.forEach(position => {
          inputs[position].classList.add('invalid')
        })
        // alert(invalidIndexes)
        return false
      }
    }

    // alert('Current form ok')
    return true
  }

  nextBtn.addEventListener('click', () => {
    if (!isFormValid()) return;
    if (currentStep < steps.length - 1) {
      showLoader(() => {
        currentStep++;
        updateStepper();
      });
    } else {
      document.querySelector('form[method="POST"]').submit();
    }
    invalidIndexes = []
    validIndexes = []
  });

  prevBtn.addEventListener('click', () => {
    if (currentStep > 0) {
      currentStep--;
      updateStepper();
    }
  });

  updateStepper();
</script>